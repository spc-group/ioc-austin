@article{Nikitin:22,
author = "Nikitin, Viktor",
title = "{TomocuPy -- efficient GPU-based tomographic reconstruction with asynchronous data processing}",
journal = "Journal of Synchrotron Radiation",
year = "2023",
volume = "30",
number = "1",
pages = "",
month = "Jan",
doi = {10.1107/S1600577522010311},
url = {https://doi.org/10.1107/S1600577522010311},
abstract = {Fast 3D data analysis and steering of a tomographic experiment by changing environmental conditions or acquisition parameters require fast, close to real-time, 3D reconstruction of large data volumes. Here a performance-optimized {\it TomocuPy} package is presented as othera GPU alternative to the commonly used central processing unit (CPU) based {\it TomoPy} package for tomographic reconstruction. {\it TomocuPy} utilizes modern hardware capabilities to organize a 3D asynchronous reconstruction involving parallel read/write operations with storage drives, CPU{--}GPU data transfers, and GPU computations. In the asynchronous reconstruction, all the operations are timely overlapped to almost fully hide all data management time. Since most cameras work with less than 16-bit digital output, the memory usage and processing speed are furthermore optimized by using 16-bit floating-point arithmetic. As a result, 3D reconstruction with {\it TomocuPy} became 20{--}30 times faster than its multi-threaded CPU equivalent. Full reconstruction (including read/write operations and methods initialization) of a 2048${\sp 3}$ tomographic volume takes less than 7s on a single Nvidia Tesla A100 and PCIe 4.0 NVMe SSD, and scales almost linearly increasing the data size. To simplify operation at synchrotron beamlines, {\it TomocuPy} provides an easy-to-use command-line interface. Efficacy of the package was demonstrated during a tomographic experiment on gas-hydrate formation in porous samples, where a steering option was implemented as a lens-changing mechanism for zooming to regions of interest.},
keywords = {tomography, reconstruction, GPU, NVMe SSD, conveyor processing, asynchronous processing},
}
